{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-d427d203ba5b2283.js","src/home-page.js","src/scripts/weather.js","node_modules/@parcel/runtime-js/lib/runtime-b464f98c9764888e.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"8VYWq\\\":\\\"index.897b9a23.js\\\",\\\"4BzQQ\\\":\\\"symbol-defs.7a937525.svg\\\"}\"));","import './scripts/API/fetchAPI';\nimport './scripts/card-item';\nimport './scripts/home';\nimport './scripts/weather';\n","import axios from 'axios';\n\nconst URL_WEATHER_TODAY = 'https://api.openweathermap.org/data/2.5/weather';\nconst URL_WEATHER_WEEK = 'https://api.openweathermap.org/data/2.5/forecast';\nconst weatherIconSvg = new URL('../img/symbol-defs.svg', import.meta.url);\n\nlet weatherDayNow = '';\nlet weatherDayOfWeek = '';\nlet weatherToday = '';\n\nfunction infoDay(weatherToday) {\n  weatherDayOfWeek = weatherToday.toLocaleString('en-US', {\n    weekday: 'long',\n  });\n  let weatherTodayOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  weatherDayNow = weatherToday.toLocaleString('en-GB', weatherTodayOptions);\n}\n\nconst weatherContainer = document.querySelector('.weather');\nlet latPosition = 0;\nlet lonPosition = 0;\nlet dataHits = [];\n\nfunction getCoordinat() {\n  navigator.geolocation.getCurrentPosition(showCoordinat, showError);\n}\n\nfunction showCoordinat(position) {\n  latPosition = position.coords.latitude;\n  lonPosition = position.coords.longitude;\n  axiosRequest(latPosition, lonPosition);\n}\n\nfunction getCoordinatWeek() {\n  navigator.geolocation.getCurrentPosition(showCoordinatWeek, showError);\n}\n\nfunction showCoordinatWeek(position) {\n  latPosition = position.coords.latitude;\n  lonPosition = position.coords.longitude;\n  axiosRequestWeek(latPosition, lonPosition);\n}\n\nfunction showError(error) {\n  switch (error.code) {\n    case error.PERMISSION_DENIED:\n      // alert('User prohibited from reading location information');\n      break;\n    case error.POSITION_UNAVAILABLE:\n      // alert('The browser was unable to locate');\n      break;\n    case error.TIMEOUT:\n      // alert('Browser has not had time to locate');\n      break;\n    case error.UNKNOWN_ERROR:\n      // alert('An unspecified error has occurred');\n      break;\n  }\n}\n\nasync function axiosRequest(latPosition, lonPosition) {\n  weatherToday = new Date();\n  infoDay(weatherToday);\n  await axios\n    .get(URL_WEATHER_TODAY, {\n      params: {\n        lat: latPosition,\n        lon: lonPosition,\n        appid: 'f2ba0fa18561e8523c95662543c65b15',\n        units: 'metric',\n      },\n    })\n    .then(response => response)\n    .then(data => {\n      dataHits = data.data;\n\n      weatherContainer.insertAdjacentHTML(\n        'beforeend',\n        `<div class=\"weather_UI\">\n            <div class=\"weather_info\">\n                <div class=\"weather_temperatura\">\n                    <p class=\"weather_temp\"> ${Math.round(\n                      dataHits.main.temp\n                    )} </p>\n                    <p class=\"weather_badge\">&#176</p>\n                </div>\n                <div class=\"weather_position\">\n                    <p class=\"weather_state\">${\n                      dataHits.weather[0].description\n                    }</p>\n                    <div class=\"weather_geoPosition\">\n                      <svg class=\"weather_svg\">\n                        <use href=\"${weatherIconSvg}#icon-location\"></use>\n                      </svg>\n                      <p class=\"weather_city\">${dataHits.name}</p>\n                    </div>\n                </div>\n            </div>\n            <img class=\"weather_img\" src=\"https://openweathermap.org/img/wn/${\n              dataHits.weather[0].icon\n            }@2x.png\" alt=\"weather img\">\n            <div class=\"weather_day\">\n                <p class=\"weather_dayOfWeek\">${weatherDayOfWeek}</p>\n                <p class=\"weather_date\">${weatherDayNow}</p>\n            </div>\n        </div>\n        <button class=\"weather_btn\">weather for week</button>\n`\n      );\n      const btnEl = document.querySelector('.weather_btn');\n      btnEl.addEventListener('click', onClickWeatherBtn);\n    })\n    .catch(error => console.log(error));\n}\n\n//  функция поиска элемента в массиве, с наибольшим вхождением\nfunction occurrence(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter(v => v === a).length - arr.filter(v => v === b).length\n    )\n    .pop();\n}\n\nfunction onClickWeatherBtn() {\n  clearWeather();\n  getCoordinatWeek();\n}\n  \nasync function axiosRequestWeek(latPosition, lonPosition){\n  let tempsWeatherImgKod = [];\n  let tempsOnDay = [];\n  let arrayData = [];\n  let days = [];\n  let fullDays = [];\n  let dayAndTime = '';\n  await axios\n    .get(URL_WEATHER_WEEK, {\n      params: {\n        lat: latPosition,\n        lon: lonPosition,\n        appid: 'f2ba0fa18561e8523c95662543c65b15',\n        units: 'metric',\n      },\n    })\n    .then(response => response)\n    .then(data => {\n      dataHits = data.data;\n      arrayData = dataHits.list;\n      weatherContainer.insertAdjacentHTML(\n        'beforeend',\n        `<div class=\"weather_UI_week\">\n            <p class=\"weather_city_week\">${dataHits.city.name}</p>\n            <div class=\"weather_info_week\">\n            </div>\n        </div>\n            `\n      );\n      const weatherConteinerOneDay =\n        document.querySelector('.weather_info_week');\n      arrayData.forEach(element => {\n        dayAndTime = element.dt_txt.split(' ');\n        fullDays.push(dayAndTime[0]);\n      });\n      days = Array.from(new Set(fullDays));\n      days.forEach(el => {\n        tempsOnDay = [];\n        tempsWeatherImgKod = [];\n        arrayData.forEach(element => {\n          if (element.dt_txt.split(' ')[0] === el) {\n            tempsOnDay.push(element.main.temp);\n            tempsWeatherImgKod.push(element.weather[0].icon);\n          }\n        });\n\n        weatherToday = new Date(el);\n        infoDay(weatherToday);\n        let WeatherImgDay = occurrence(tempsWeatherImgKod);\n        weatherConteinerOneDay.insertAdjacentHTML(\n          'beforeend',\n          `<div class=\"weather_info_day\">\n                    <p class=\"weather_dayOfWeek_week\">${weatherDayOfWeek}</p>\n                    <p class=\"weather_date_week\">${weatherDayNow}</p>\n                    <img class=\"weather_img_week\" src=\"https://openweathermap.org/img/wn/${WeatherImgDay}@2x.png\" alt=\"weather img\">\n                    <div class=\"weather_temp_fullday\">\n                        <div class=\"weather_temperatura_min\">\n                            <p class=\"weather_temp_week\"> ${Math.round(\n                              Math.min(...tempsOnDay)\n                            )} </p>\n                            <p class=\"weather_badge_week\">&#176</p>\n                        </div>\n                        <div>\n                        <p class=\"weather_temp_week\"> ... </p>\n                        </div>\n                        <div class=\"weather_temperatura_max\">\n                            <p class=\"weather_temp_week\"> ${Math.round(\n                              Math.max(...tempsOnDay)\n                            )} </p>\n                            <p class=\"weather_badge_week\">&#176</p>\n                        </div>\n                    </div>\n                </div>\n          `\n        );\n      });\n      weatherConteinerOneDay.insertAdjacentHTML(\n        'beforeend',\n        `<button class=\"weather_week_btn\">weather for today</button>`\n      );\n      const btnWeekEl = document.querySelector('.weather_week_btn');\n      btnWeekEl.addEventListener('click', returnWeather);\n    })\n    .catch(error => console.log(error));\n}\n\nfunction returnWeather() {\n  clearWeather();\n  getCoordinat();\n}\n\nfunction clearWeather() {\n  weatherContainer.innerHTML = '';\n}\n\n// Запуск Геолокации\ngetCoordinat();\n","module.exports = require('./helpers/bundle-url').getBundleURL('8VYWq') + require('./helpers/bundle-manifest').resolve(\"4BzQQ\");"],"names":["parcelRequire","register","JSON","parse","$bpxeT","$e59edd220a2aa537$var$URL_WEATHER_TODAY","$e59edd220a2aa537$var$URL_WEATHER_WEEK","$6ebf24f7640348d6$exports","getBundleURL","resolve","$e59edd220a2aa537$var$weatherIconSvg","URL","$e59edd220a2aa537$var$weatherDayNow","$e59edd220a2aa537$var$weatherDayOfWeek","$e59edd220a2aa537$var$infoDay","weatherToday1","toLocaleString","weekday","year","month","day","$e59edd220a2aa537$var$weatherContainer","document","querySelector","$e59edd220a2aa537$var$latPosition","$e59edd220a2aa537$var$lonPosition","$e59edd220a2aa537$var$dataHits","$e59edd220a2aa537$var$getCoordinat","navigator","geolocation","getCurrentPosition","$e59edd220a2aa537$var$showCoordinat","$e59edd220a2aa537$var$showError","position","coords","latitude","longitude","latPosition1","lonPosition1","$e59edd220a2aa537$var$_axiosRequest","apply","this","arguments","$e59edd220a2aa537$var$axiosRequest","$e59edd220a2aa537$var$showCoordinatWeek","latPosition2","lonPosition2","$e59edd220a2aa537$var$_axiosRequestWeek","$e59edd220a2aa537$var$axiosRequestWeek","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","$parcel$interopDefault","$2TvXO","mark","_callee","Date","$dIxxU","default","get","params","lat","lon","appid","units","then","response","data","insertAdjacentHTML","concat","Math","round","main","temp","weather","description","name","icon","addEventListener","$e59edd220a2aa537$var$onClickWeatherBtn","catch","console","log","$e59edd220a2aa537$var$occurrence","arr","sort","a","b","filter","v","length","pop","$e59edd220a2aa537$var$clearWeather","tempsWeatherImgKod","tempsOnDay","arrayData","fullDays","dayAndTime","list","city","weatherConteinerOneDay","forEach","element","dt_txt","split","push","Array","from","Set","el","_Math","_Math1","WeatherImgDay","min","$8nrFW","max","$e59edd220a2aa537$var$returnWeather","innerHTML"],"version":3,"file":"index.897b9a23.js.map"}