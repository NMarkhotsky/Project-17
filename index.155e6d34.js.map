{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-52c2089755906482.js","src/home-page.js","src/scripts/weather.js","node_modules/@parcel/runtime-js/lib/runtime-094d1b7e61d55c79.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"iUiUp\\\":\\\"index.155e6d34.js\\\",\\\"6RkRa\\\":\\\"symbol-defs.0d828f66.svg\\\"}\"));","import './scripts/API/fetchAPI';\nimport './scripts/card-item';\nimport './scripts/home';\nimport './scripts/weather';\n","import axios from 'axios';\n\nconst URL_WEATHER_TODAY = 'https://api.openweathermap.org/data/2.5/weather';\nconst URL_WEATHER_WEEK = 'https://api.openweathermap.org/data/2.5/forecast';\nconst weatherIconSvg = new URL('../img/symbol-defs.svg', import.meta.url);\n\nlet weatherDayNow = '';\nlet weatherDayOfWeek = '';\nlet weatherToday = '';\nlet weatherPagesToday = true; //true - todey, false - week\n\nfunction infoDay(weatherToday) {\n  weatherDayOfWeek = weatherToday.toLocaleString('en-US', {\n    weekday: 'long',\n  });\n  let weatherTodayOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  weatherDayNow = weatherToday.toLocaleString('en-GB', weatherTodayOptions);\n}\n\nconst weatherContainer = document.querySelector('.weather');\nlet latPosition = 0;\nlet lonPosition = 0;\nlet dataHits = [];\n\nfunction getCoordinat() {\n  navigator.geolocation.getCurrentPosition(showCoordinat, showError);\n}\n\nfunction showCoordinat(position) {\n  latPosition = position.coords.latitude;\n  lonPosition = position.coords.longitude;\n  if (weatherPagesToday === true) {\n    parsWeatherToday();\n  } else {\n    parsWeatherWeek();\n  }\n}\n\nasync function axiosRequestNew(URL) {\n  const params = {\n    lat: latPosition,\n    lon: lonPosition,\n    appid: 'f2ba0fa18561e8523c95662543c65b15',\n    units: 'metric',\n  };\n  try {\n    const response = await axios.get(URL, { params });\n    const data = response.data;\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction showError(error) {\n  switch (error.code) {\n    case error.PERMISSION_DENIED:\n      // alert('User prohibited from reading location information');\n      break;\n    case error.POSITION_UNAVAILABLE:\n      // alert('The browser was unable to locate');\n      break;\n    case error.TIMEOUT:\n      // alert('Browser has not had time to locate');\n      break;\n    case error.UNKNOWN_ERROR:\n      // alert('An unspecified error has occurred');\n      break;\n  }\n}\n\nasync function parsWeatherToday() {\n  weatherToday = new Date();\n  infoDay(weatherToday);\n  dataHits = await axiosRequestNew(URL_WEATHER_TODAY);\n  weatherContainer.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"weather_UI\">\n        <div class=\"weather_info\">\n          <div class=\"weather_temperatura\">\n            <p class=\"weather_temp\"> ${Math.round(dataHits.main.temp)} </p>\n            <p class=\"weather_badge\">&#176</p>\n          </div>\n          <div class=\"weather_position\">\n            <p class=\"weather_state\">${dataHits.weather[0].description}</p>\n            <div class=\"weather_geoPosition\">\n              <svg class=\"weather_svg\">\n                <use href=\"${weatherIconSvg}#icon-location\"></use>\n              </svg>\n              <p class=\"weather_city\">${dataHits.name}</p>\n            </div>\n          </div>\n        </div>\n        <img class=\"weather_img\" src=\"https://openweathermap.org/img/wn/${\n          dataHits.weather[0].icon\n        }@2x.png\" alt=\"weather img\">\n        <div class=\"weather_day\">\n          <p class=\"weather_dayOfWeek\">${weatherDayOfWeek}</p>\n          <p class=\"weather_date\">${weatherDayNow}</p>\n        </div>\n      </div>\n    <button class=\"weather_btn\">weather for week</button>\n`\n  );\n  const btnEl = document.querySelector('.weather_btn');\n  btnEl.addEventListener('click', onClickWeatherBtn);\n}\n\n//  функция поиска элемента в массиве, с наибольшим вхождением\nfunction occurrence(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter(v => v === a).length - arr.filter(v => v === b).length\n    )\n    .pop();\n}\n\nfunction onClickWeatherBtn() {\n  weatherPagesToday = false;\n  clearWeather();\n  getCoordinat();\n}\n\nasync function parsWeatherWeek() {\n  let tempsWeatherImgKod = [];\n  let tempsOnDay = [];\n  let arrayData = [];\n  let days = [];\n  let fullDays = [];\n  let dayAndTime = '';\n  dataHits = await axiosRequestNew(URL_WEATHER_WEEK);\n  arrayData = dataHits.list;\n  weatherContainer.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"weather_UI_week\">\n          <p class=\"weather_city_week\">${dataHits.city.name}</p>\n          <div class=\"weather_info_week\">\n          </div>\n        </div>\n      `\n  );\n  const weatherConteinerOneDay = document.querySelector('.weather_info_week');\n  arrayData.forEach(element => {\n    dayAndTime = element.dt_txt.split(' ');\n    fullDays.push(dayAndTime[0]);\n  });\n  days = Array.from(new Set(fullDays));\n  days.forEach(el => {\n    tempsOnDay = [];\n    tempsWeatherImgKod = [];\n    arrayData.forEach(element => {\n      if (element.dt_txt.split(' ')[0] === el) {\n        tempsOnDay.push(element.main.temp);\n        tempsWeatherImgKod.push(element.weather[0].icon);\n      }\n    });\n    weatherToday = new Date(el);\n    infoDay(weatherToday);\n    let WeatherImgDay = occurrence(tempsWeatherImgKod);\n    weatherConteinerOneDay.insertAdjacentHTML(\n      'beforeend',\n      `<div class=\"weather_info_day\">\n          <p class=\"weather_dayOfWeek_week\">${weatherDayOfWeek}</p>\n          <p class=\"weather_date_week\">${weatherDayNow}</p>\n          <img class=\"weather_img_week\" src=\"https://openweathermap.org/img/wn/${WeatherImgDay}@2x.png\" alt=\"weather img\">\n          <div class=\"weather_temp_fullday\">\n              <div class=\"weather_temperatura_min\">\n                <p class=\"weather_temp_week\"> ${Math.round(\n                  Math.min(...tempsOnDay)\n                )} </p>\n                <p class=\"weather_badge_week\">&#176</p>\n              </div>\n              <div>\n              <p class=\"weather_temp_week\"> ... </p>\n              </div>\n              <div class=\"weather_temperatura_max\">\n                <p class=\"weather_temp_week\"> ${Math.round(\n                  Math.max(...tempsOnDay)\n                )} </p>\n                <p class=\"weather_badge_week\">&#176</p>\n              </div>\n          </div>\n      </div>\n`\n    );\n  });\n  weatherConteinerOneDay.insertAdjacentHTML(\n    'beforeend',\n    `<button class=\"weather_week_btn\">weather for today</button>`\n  );\n  const btnWeekEl = document.querySelector('.weather_week_btn');\n  btnWeekEl.addEventListener('click', returnWeather);\n}\n\nfunction returnWeather() {\n  weatherPagesToday = true;\n  clearWeather();\n  getCoordinat();\n}\n\nfunction clearWeather() {\n  weatherContainer.innerHTML = '';\n}\n\n// Запуск Геолокации\ngetCoordinat();\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"6RkRa\")).toString();"],"names":["parcelRequire","register","JSON","parse","$2shzp","$b5fb211c30c34712$exports","URL","resolve","import","meta","url","toString","$d01cc71665c04980$var$weatherIconSvg","$d01cc71665c04980$var$weatherDayNow","$d01cc71665c04980$var$weatherDayOfWeek","$d01cc71665c04980$var$weatherToday","$d01cc71665c04980$var$weatherPagesToday","$d01cc71665c04980$var$infoDay","weatherToday1","toLocaleString","weekday","year","month","day","$d01cc71665c04980$var$weatherContainer","document","querySelector","$d01cc71665c04980$var$latPosition","$d01cc71665c04980$var$lonPosition","$d01cc71665c04980$var$dataHits","$d01cc71665c04980$var$getCoordinat","navigator","geolocation","getCurrentPosition","$d01cc71665c04980$var$showCoordinat","$d01cc71665c04980$var$showError","position","coords","latitude","longitude","async","Date","$d01cc71665c04980$var$axiosRequestNew","insertAdjacentHTML","Math","round","main","temp","weather","description","name","icon","addEventListener","$d01cc71665c04980$var$onClickWeatherBtn","$d01cc71665c04980$var$parsWeatherToday","tempsWeatherImgKod","tempsOnDay","arrayData","days","fullDays","dayAndTime","list","city","weatherConteinerOneDay","forEach","element","dt_txt","split","push","Array","from","Set","el","WeatherImgDay","arr","sort","a","b","filter","v","length","pop","min","max","$d01cc71665c04980$var$returnWeather","$d01cc71665c04980$var$parsWeatherWeek","params","lat","lon","appid","units","response","default","get","data","error","console","log","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","$d01cc71665c04980$var$clearWeather","innerHTML"],"version":3,"file":"index.155e6d34.js.map"}