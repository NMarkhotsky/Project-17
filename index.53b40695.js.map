{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-d427d203ba5b2283.js","src/home-page.js","src/scripts/weather.js","node_modules/@parcel/runtime-js/lib/runtime-b464f98c9764888e.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"8VYWq\\\":\\\"index.53b40695.js\\\",\\\"4BzQQ\\\":\\\"symbol-defs.0d828f66.svg\\\"}\"));","import './scripts/API/fetchAPI';\nimport './scripts/card-item';\nimport './scripts/home';\nimport './scripts/weather';\n","import axios from 'axios';\n\nconst URL_WEATHER_TODAY = 'https://api.openweathermap.org/data/2.5/weather';\nconst URL_WEATHER_WEEK = 'https://api.openweathermap.org/data/2.5/forecast';\nconst weatherIconSvg = new URL('../img/symbol-defs.svg', import.meta.url);\n\nlet weatherDayNow = '';\nlet weatherDayOfWeek = '';\nlet weatherToday = '';\nlet weatherPagesToday = true; //true - todey, false - week\n\nfunction infoDay(weatherToday) {\n  weatherDayOfWeek = weatherToday.toLocaleString('en-US', {\n    weekday: 'long',\n  });\n  let weatherTodayOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  weatherDayNow = weatherToday.toLocaleString('en-GB', weatherTodayOptions);\n}\n\nconst weatherContainer = document.querySelector('.weather');\nlet latPosition = 0;\nlet lonPosition = 0;\nlet dataHits = [];\n\nfunction getCoordinat() {\n  navigator.geolocation.getCurrentPosition(showCoordinat, showError);\n}\n\nfunction showCoordinat(position) {\n  latPosition = position.coords.latitude;\n  lonPosition = position.coords.longitude;\n  if (weatherPagesToday === true) {\n    parsWeatherToday();\n  } else {\n    parsWeatherWeek();\n  }\n}\n\nasync function axiosRequestNew(URL) {\n  const params = {\n    lat: latPosition,\n    lon: lonPosition,\n    appid: 'f2ba0fa18561e8523c95662543c65b15',\n    units: 'metric',\n  };\n  try {\n    const response = await axios.get(URL, { params });\n    const data = response.data;\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction showError(error) {\n  switch (error.code) {\n    case error.PERMISSION_DENIED:\n      // alert('User prohibited from reading location information');\n      break;\n    case error.POSITION_UNAVAILABLE:\n      // alert('The browser was unable to locate');\n      break;\n    case error.TIMEOUT:\n      // alert('Browser has not had time to locate');\n      break;\n    case error.UNKNOWN_ERROR:\n      // alert('An unspecified error has occurred');\n      break;\n  }\n}\n\nasync function parsWeatherToday() {\n  weatherToday = new Date();\n  infoDay(weatherToday);\n  dataHits = await axiosRequestNew(URL_WEATHER_TODAY);\n  weatherContainer.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"weather_UI\">\n        <div class=\"weather_info\">\n          <div class=\"weather_temperatura\">\n            <p class=\"weather_temp\"> ${Math.round(dataHits.main.temp)} </p>\n            <p class=\"weather_badge\">&#176</p>\n          </div>\n          <div class=\"weather_position\">\n            <p class=\"weather_state\">${dataHits.weather[0].description}</p>\n            <div class=\"weather_geoPosition\">\n              <svg class=\"weather_svg\">\n                <use href=\"${weatherIconSvg}#icon-location\"></use>\n              </svg>\n              <p class=\"weather_city\">${dataHits.name}</p>\n            </div>\n          </div>\n        </div>\n        <img class=\"weather_img\" src=\"https://openweathermap.org/img/wn/${\n          dataHits.weather[0].icon\n        }@2x.png\" alt=\"weather img\">\n        <div class=\"weather_day\">\n          <p class=\"weather_dayOfWeek\">${weatherDayOfWeek}</p>\n          <p class=\"weather_date\">${weatherDayNow}</p>\n        </div>\n      </div>\n    <button class=\"weather_btn\">weather for week</button>\n`\n  );\n  const btnEl = document.querySelector('.weather_btn');\n  btnEl.addEventListener('click', onClickWeatherBtn);\n}\n\n//  функция поиска элемента в массиве, с наибольшим вхождением\nfunction occurrence(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter(v => v === a).length - arr.filter(v => v === b).length\n    )\n    .pop();\n}\n\nfunction onClickWeatherBtn() {\n  weatherPagesToday = false;\n  clearWeather();\n  getCoordinat();\n}\n\nasync function parsWeatherWeek() {\n  let tempsWeatherImgKod = [];\n  let tempsOnDay = [];\n  let arrayData = [];\n  let days = [];\n  let fullDays = [];\n  let dayAndTime = '';\n  dataHits = await axiosRequestNew(URL_WEATHER_WEEK);\n  arrayData = dataHits.list;\n  weatherContainer.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"weather_UI_week\">\n          <p class=\"weather_city_week\">${dataHits.city.name}</p>\n          <div class=\"weather_info_week\">\n          </div>\n        </div>\n      `\n  );\n  const weatherConteinerOneDay = document.querySelector('.weather_info_week');\n  arrayData.forEach(element => {\n    dayAndTime = element.dt_txt.split(' ');\n    fullDays.push(dayAndTime[0]);\n  });\n  days = Array.from(new Set(fullDays));\n  days.forEach(el => {\n    tempsOnDay = [];\n    tempsWeatherImgKod = [];\n    arrayData.forEach(element => {\n      if (element.dt_txt.split(' ')[0] === el) {\n        tempsOnDay.push(element.main.temp);\n        tempsWeatherImgKod.push(element.weather[0].icon);\n      }\n    });\n    weatherToday = new Date(el);\n    infoDay(weatherToday);\n    let WeatherImgDay = occurrence(tempsWeatherImgKod);\n    weatherConteinerOneDay.insertAdjacentHTML(\n      'beforeend',\n      `<div class=\"weather_info_day\">\n          <p class=\"weather_dayOfWeek_week\">${weatherDayOfWeek}</p>\n          <p class=\"weather_date_week\">${weatherDayNow}</p>\n          <img class=\"weather_img_week\" src=\"https://openweathermap.org/img/wn/${WeatherImgDay}@2x.png\" alt=\"weather img\">\n          <div class=\"weather_temp_fullday\">\n              <div class=\"weather_temperatura_min\">\n                <p class=\"weather_temp_week\"> ${Math.round(\n                  Math.min(...tempsOnDay)\n                )} </p>\n                <p class=\"weather_badge_week\">&#176</p>\n              </div>\n              <div>\n              <p class=\"weather_temp_week\"> ... </p>\n              </div>\n              <div class=\"weather_temperatura_max\">\n                <p class=\"weather_temp_week\"> ${Math.round(\n                  Math.max(...tempsOnDay)\n                )} </p>\n                <p class=\"weather_badge_week\">&#176</p>\n              </div>\n          </div>\n      </div>\n`\n    );\n  });\n  weatherConteinerOneDay.insertAdjacentHTML(\n    'beforeend',\n    `<button class=\"weather_week_btn\">weather for today</button>`\n  );\n  const btnWeekEl = document.querySelector('.weather_week_btn');\n  btnWeekEl.addEventListener('click', returnWeather);\n}\n\nfunction returnWeather() {\n  weatherPagesToday = true;\n  clearWeather();\n  getCoordinat();\n}\n\nfunction clearWeather() {\n  weatherContainer.innerHTML = '';\n}\n\n// Запуск Геолокации\ngetCoordinat();\n","module.exports = require('./helpers/bundle-url').getBundleURL('8VYWq') + require('./helpers/bundle-manifest').resolve(\"4BzQQ\");"],"names":["parcelRequire","register","JSON","parse","$bpxeT","$e59edd220a2aa537$var$URL_WEATHER_TODAY","$e59edd220a2aa537$var$URL_WEATHER_WEEK","$6ebf24f7640348d6$exports","getBundleURL","resolve","$e59edd220a2aa537$var$weatherIconSvg","URL","$e59edd220a2aa537$var$weatherDayNow","$e59edd220a2aa537$var$weatherDayOfWeek","$e59edd220a2aa537$var$weatherPagesToday","$e59edd220a2aa537$var$infoDay","weatherToday1","toLocaleString","weekday","year","month","day","$e59edd220a2aa537$var$weatherContainer","document","querySelector","$e59edd220a2aa537$var$latPosition","$e59edd220a2aa537$var$lonPosition","$e59edd220a2aa537$var$dataHits","$e59edd220a2aa537$var$getCoordinat","navigator","geolocation","getCurrentPosition","$e59edd220a2aa537$var$showCoordinat","$e59edd220a2aa537$var$showError","position","coords","latitude","longitude","$e59edd220a2aa537$var$_parsWeatherToday","apply","this","arguments","$e59edd220a2aa537$var$parsWeatherToday","$e59edd220a2aa537$var$_parsWeatherWeek","$e59edd220a2aa537$var$parsWeatherWeek","$e59edd220a2aa537$var$axiosRequestNew","$e59edd220a2aa537$var$_axiosRequestNew","$parcel$interopDefault","$2TvXO","mark","_callee","params","response","data","lat","lon","appid","units","$dIxxU","default","get","_ctx","sent","console","log","t0","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","Date","insertAdjacentHTML","concat","Math","round","main","temp","weather","description","name","icon","addEventListener","$e59edd220a2aa537$var$onClickWeatherBtn","$e59edd220a2aa537$var$occurrence","arr","sort","a","b","filter","v","length","pop","$e59edd220a2aa537$var$clearWeather","tempsWeatherImgKod","tempsOnDay","arrayData","fullDays","dayAndTime","weatherConteinerOneDay","list","city","forEach","element","dt_txt","split","push","Array","from","Set","el","_Math","_Math1","WeatherImgDay","min","$8nrFW","max","$e59edd220a2aa537$var$returnWeather","innerHTML"],"version":3,"file":"index.53b40695.js.map"}