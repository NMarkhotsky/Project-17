{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-52c2089755906482.js","src/home-page.js","src/scripts/weather.js","node_modules/@parcel/runtime-js/lib/runtime-094d1b7e61d55c79.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"iUiUp\\\":\\\"index.8135f5aa.js\\\",\\\"6RkRa\\\":\\\"symbol-defs.7a937525.svg\\\"}\"));","import './scripts/API/fetchAPI';\nimport './scripts/card-item';\nimport './scripts/home';\nimport './scripts/weather';\n","import axios from 'axios';\n\nconst URL_WEATHER_TODAY = 'https://api.openweathermap.org/data/2.5/weather';\nconst URL_WEATHER_WEEK = 'https://api.openweathermap.org/data/2.5/forecast';\nconst weatherIconSvg = new URL('../img/symbol-defs.svg', import.meta.url);\n\nlet weatherDayNow = '';\nlet weatherDayOfWeek = '';\nlet weatherToday = '';\n\nfunction infoDay(weatherToday) {\n  weatherDayOfWeek = weatherToday.toLocaleString('en-US', {\n    weekday: 'long',\n  });\n  let weatherTodayOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  weatherDayNow = weatherToday.toLocaleString('en-GB', weatherTodayOptions);\n}\n\nconst weatherContainer = document.querySelector('.weather');\nlet latPosition = 0;\nlet lonPosition = 0;\nlet dataHits = [];\n\nfunction getCoordinat() {\n  navigator.geolocation.getCurrentPosition(showCoordinat, showError);\n}\n\nfunction showCoordinat(position) {\n  latPosition = position.coords.latitude;\n  lonPosition = position.coords.longitude;\n  axiosRequest(latPosition, lonPosition);\n}\n\nfunction getCoordinatWeek() {\n  navigator.geolocation.getCurrentPosition(showCoordinatWeek, showError);\n}\n\nfunction showCoordinatWeek(position) {\n  latPosition = position.coords.latitude;\n  lonPosition = position.coords.longitude;\n  axiosRequestWeek(latPosition, lonPosition);\n}\n\nfunction showError(error) {\n  switch (error.code) {\n    case error.PERMISSION_DENIED:\n      // alert('User prohibited from reading location information');\n      break;\n    case error.POSITION_UNAVAILABLE:\n      // alert('The browser was unable to locate');\n      break;\n    case error.TIMEOUT:\n      // alert('Browser has not had time to locate');\n      break;\n    case error.UNKNOWN_ERROR:\n      // alert('An unspecified error has occurred');\n      break;\n  }\n}\n\nasync function axiosRequest(latPosition, lonPosition) {\n  weatherToday = new Date();\n  infoDay(weatherToday);\n  await axios\n    .get(URL_WEATHER_TODAY, {\n      params: {\n        lat: latPosition,\n        lon: lonPosition,\n        appid: 'f2ba0fa18561e8523c95662543c65b15',\n        units: 'metric',\n      },\n    })\n    .then(response => response)\n    .then(data => {\n      dataHits = data.data;\n\n      weatherContainer.insertAdjacentHTML(\n        'beforeend',\n        `<div class=\"weather_UI\">\n            <div class=\"weather_info\">\n                <div class=\"weather_temperatura\">\n                    <p class=\"weather_temp\"> ${Math.round(\n                      dataHits.main.temp\n                    )} </p>\n                    <p class=\"weather_badge\">&#176</p>\n                </div>\n                <div class=\"weather_position\">\n                    <p class=\"weather_state\">${\n                      dataHits.weather[0].description\n                    }</p>\n                    <div class=\"weather_geoPosition\">\n                      <svg class=\"weather_svg\">\n                        <use href=\"${weatherIconSvg}#icon-location\"></use>\n                      </svg>\n                      <p class=\"weather_city\">${dataHits.name}</p>\n                    </div>\n                </div>\n            </div>\n            <img class=\"weather_img\" src=\"https://openweathermap.org/img/wn/${\n              dataHits.weather[0].icon\n            }@2x.png\" alt=\"weather img\">\n            <div class=\"weather_day\">\n                <p class=\"weather_dayOfWeek\">${weatherDayOfWeek}</p>\n                <p class=\"weather_date\">${weatherDayNow}</p>\n            </div>\n        </div>\n        <button class=\"weather_btn\">weather for week</button>\n`\n      );\n      const btnEl = document.querySelector('.weather_btn');\n      btnEl.addEventListener('click', onClickWeatherBtn);\n    })\n    .catch(error => console.log(error));\n}\n\n//  функция поиска элемента в массиве, с наибольшим вхождением\nfunction occurrence(arr) {\n  return arr\n    .sort(\n      (a, b) =>\n        arr.filter(v => v === a).length - arr.filter(v => v === b).length\n    )\n    .pop();\n}\n\nfunction onClickWeatherBtn() {\n  clearWeather();\n  getCoordinatWeek();\n}\n  \nasync function axiosRequestWeek(latPosition, lonPosition){\n  let tempsWeatherImgKod = [];\n  let tempsOnDay = [];\n  let arrayData = [];\n  let days = [];\n  let fullDays = [];\n  let dayAndTime = '';\n  await axios\n    .get(URL_WEATHER_WEEK, {\n      params: {\n        lat: latPosition,\n        lon: lonPosition,\n        appid: 'f2ba0fa18561e8523c95662543c65b15',\n        units: 'metric',\n      },\n    })\n    .then(response => response)\n    .then(data => {\n      dataHits = data.data;\n      arrayData = dataHits.list;\n      weatherContainer.insertAdjacentHTML(\n        'beforeend',\n        `<div class=\"weather_UI_week\">\n            <p class=\"weather_city_week\">${dataHits.city.name}</p>\n            <div class=\"weather_info_week\">\n            </div>\n        </div>\n            `\n      );\n      const weatherConteinerOneDay =\n        document.querySelector('.weather_info_week');\n      arrayData.forEach(element => {\n        dayAndTime = element.dt_txt.split(' ');\n        fullDays.push(dayAndTime[0]);\n      });\n      days = Array.from(new Set(fullDays));\n      days.forEach(el => {\n        tempsOnDay = [];\n        tempsWeatherImgKod = [];\n        arrayData.forEach(element => {\n          if (element.dt_txt.split(' ')[0] === el) {\n            tempsOnDay.push(element.main.temp);\n            tempsWeatherImgKod.push(element.weather[0].icon);\n          }\n        });\n\n        weatherToday = new Date(el);\n        infoDay(weatherToday);\n        let WeatherImgDay = occurrence(tempsWeatherImgKod);\n        weatherConteinerOneDay.insertAdjacentHTML(\n          'beforeend',\n          `<div class=\"weather_info_day\">\n                    <p class=\"weather_dayOfWeek_week\">${weatherDayOfWeek}</p>\n                    <p class=\"weather_date_week\">${weatherDayNow}</p>\n                    <img class=\"weather_img_week\" src=\"https://openweathermap.org/img/wn/${WeatherImgDay}@2x.png\" alt=\"weather img\">\n                    <div class=\"weather_temp_fullday\">\n                        <div class=\"weather_temperatura_min\">\n                            <p class=\"weather_temp_week\"> ${Math.round(\n                              Math.min(...tempsOnDay)\n                            )} </p>\n                            <p class=\"weather_badge_week\">&#176</p>\n                        </div>\n                        <div>\n                        <p class=\"weather_temp_week\"> ... </p>\n                        </div>\n                        <div class=\"weather_temperatura_max\">\n                            <p class=\"weather_temp_week\"> ${Math.round(\n                              Math.max(...tempsOnDay)\n                            )} </p>\n                            <p class=\"weather_badge_week\">&#176</p>\n                        </div>\n                    </div>\n                </div>\n          `\n        );\n      });\n      weatherConteinerOneDay.insertAdjacentHTML(\n        'beforeend',\n        `<button class=\"weather_week_btn\">weather for today</button>`\n      );\n      const btnWeekEl = document.querySelector('.weather_week_btn');\n      btnWeekEl.addEventListener('click', returnWeather);\n    })\n    .catch(error => console.log(error));\n}\n\nfunction returnWeather() {\n  clearWeather();\n  getCoordinat();\n}\n\nfunction clearWeather() {\n  weatherContainer.innerHTML = '';\n}\n\n// Запуск Геолокации\ngetCoordinat();\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"6RkRa\")).toString();"],"names":["parcelRequire","register","JSON","parse","$2shzp","$b5fb211c30c34712$exports","URL","resolve","import","meta","url","toString","$d01cc71665c04980$var$weatherIconSvg","$d01cc71665c04980$var$weatherDayNow","$d01cc71665c04980$var$weatherDayOfWeek","$d01cc71665c04980$var$weatherToday","$d01cc71665c04980$var$infoDay","weatherToday1","toLocaleString","weekday","year","month","day","$d01cc71665c04980$var$weatherContainer","document","querySelector","$d01cc71665c04980$var$latPosition","$d01cc71665c04980$var$lonPosition","$d01cc71665c04980$var$dataHits","$d01cc71665c04980$var$getCoordinat","navigator","geolocation","getCurrentPosition","$d01cc71665c04980$var$showCoordinat","$d01cc71665c04980$var$showError","position","coords","latitude","longitude","async","latPosition1","lonPosition1","Date","default","get","params","lat","lon","appid","units","then","response","data","insertAdjacentHTML","Math","round","main","temp","weather","description","name","icon","addEventListener","$d01cc71665c04980$var$onClickWeatherBtn","catch","error","console","log","$d01cc71665c04980$var$axiosRequest","$d01cc71665c04980$var$showCoordinatWeek","latPosition2","lonPosition2","tempsWeatherImgKod","tempsOnDay","arrayData","days","fullDays","dayAndTime","list","city","weatherConteinerOneDay","forEach","element","dt_txt","split","push","Array","from","Set","el","WeatherImgDay","arr","sort","a","b","filter","v","length","pop","min","max","$d01cc71665c04980$var$returnWeather","$d01cc71665c04980$var$axiosRequestWeek","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","$d01cc71665c04980$var$clearWeather","innerHTML"],"version":3,"file":"index.8135f5aa.js.map"}